DROP TABLE IF EXISTS users, friends, mpa_ratings, films, genres, film_genres, directors, film_director, film_likes, review, estimation_review, user_event  CASCADE;

CREATE TABLE IF NOT EXISTS users
(
    user_id     INT        GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email       VARCHAR    NOT NULL UNIQUE,
    login       VARCHAR    NOT NULL UNIQUE,
    name        VARCHAR,
    birthday    DATE       NOT NULL
);

CREATE TABLE IF NOT EXISTS mpa_ratings
(
    mpa_rating_id    INT       PRIMARY KEY UNIQUE,
    mpa_name         VARCHAR   NOT NULL
);

CREATE TABLE IF NOT EXISTS genres
(
    genre_id      INT        PRIMARY KEY UNIQUE,
    genre_name    VARCHAR    NOT NULL
);

CREATE TABLE IF NOT EXISTS films
(
    film_id          INT             GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name             VARCHAR         NOT NULL,
    description      VARCHAR(200)    NOT NULL,
    release_date     DATE            NOT NULL,
    duration         INT             NOT NULL,
    mpa_rating_id    INT             REFERENCES mpa_ratings(mpa_rating_id)
);

CREATE TABLE IF NOT EXISTS friends
(
    user_id      INT    REFERENCES users(user_id) ON DELETE CASCADE,
    friend_id    INT    REFERENCES users(user_id) ON DELETE CASCADE,
    PRIMARY KEY(user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS film_genres
(
    film_id     INT    REFERENCES films(film_id) ON DELETE CASCADE,
    genre_id    INT    REFERENCES genres(genre_id),
    PRIMARY KEY(film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS film_likes
(
    film_id    INT    REFERENCES films(film_id) ON DELETE CASCADE,
    user_id    INT    REFERENCES users(user_id) ON DELETE CASCADE,
    PRIMARY KEY(film_id, user_id)
);

CREATE TABLE IF NOT EXISTS review
(
    review_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content     VARCHAR(1000),
    is_positive BOOLEAN,
    user_id     INTEGER,
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    film_id     INTEGER,
    FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS estimation_review
(
    estimation_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id       INTEGER,
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    review_id     INTEGER,
    FOREIGN KEY (review_id) REFERENCES review (review_id) ON DELETE CASCADE,
    estimation    TINYINT
);

CREATE TABLE IF NOT EXISTS directors
(
    director_id         INT             GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    director_name       VARCHAR(200)    UNIQUE
);

CREATE TABLE IF NOT EXISTS film_director
(
    film_id             INT             REFERENCES films(film_id) ON DELETE CASCADE,
    director_id         INT             REFERENCES directors(director_id) ON DELETE CASCADE,
    CONSTRAINT film_director UNIQUE (film_id, director_id)
);

CREATE TYPE IF NOT EXISTS event_type AS ENUM ('LIKE', 'REVIEW', 'FRIEND');
CREATE TYPE IF NOT EXISTS operation_type AS ENUM ('REMOVE', 'ADD', 'UPDATE');

CREATE TABLE IF NOT EXISTS user_event
(
    event_id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_type     event_type     NOT NULL,
    user_id        INTEGER,
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    entity_Id      INTEGER,
    timestamp      BIGINT      NOT NULL DEFAULT DATEDIFF('MILLISECOND', TIMESTAMP '1970-01-01 00:00:00', CURRENT_TIMESTAMP),
    operation operation_type NOT NULL
);